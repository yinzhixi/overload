<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:tx="http://www.springframework.org/schema/tx"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/tx 
        http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">
        
        <!--  引入db.properties  -->
        <context:property-placeholder location="classpath:config/db.properties"/>
        
        <!--  配置druid的数据源  -->
        <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
          <property name="driverClassName" value="${mysql.driverClassName}"/>
          <property name="url" value="${mysql.url}"/>
          <property name="username" value="${mysql.username}"/>
          <property name="password" value="${mysql.password}"/>
            <!-- 初始化连接大小 --> 
          <property name="initialSize" value="5"/>
          <!--    连接池最大使用连接数量  -->
          <property name="maxActive" value="20"/>
          <!--  连接池最大空闲  -->
          <!-- <property name="maxIdle" value="20"/> -->
          <!--   连接池最小空闲  -->
          <property name="minIdle" value="2"/>
          <!--     获取连接最大等待时间  -->
          <property name="maxWait" value="60000"/>
          <property name="poolPreparedStatements" value="true"/>
          <property name="maxPoolPreparedStatementPerConnectionSize" value="33"/>
          <property name="testOnBorrow" value="false"/>
          <property name="testOnReturn" value="false"/>
          <property name="testWhileIdle" value="true"/>
          <!--   配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒  -->
          <property name="timeBetweenEvictionRunsMillis" value="60000"/>
          <!--  配置一个连接在池中最小生存的时间，单位是毫秒  -->
          <property name="minEvictableIdleTimeMillis" value="25200000"/>
          <!--   打开removeAbandoned功能  -->
          <property name="removeAbandoned" value="true"/>
          <!--  1800秒，也就是30分钟  -->
          <property name="removeAbandonedTimeout" value="1800"/>
          <!--  关闭abanded连接时输出错误日志  -->
          <property name="logAbandoned" value="true"/>
          <!--  监控数据库  -->
          <property name="filters" value="stat"/>
          <!--   <property name="filters" value="mergeStat" />  -->
        </bean>
        
        <!-- spring和MyBatis完美整合，不需要mybatis的配置映射文件 -->
        <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
          <!--  mybatis配置文件路径  -->
          <property name="configLocation" value="classpath:config/mybatis.xml"/>
          <!-- 数据源 -->
          <property name="dataSource" ref="dataSource" />
          <!-- 自动扫描mapping.xml文件，**表示迭代查找  sql映射文件路径-->
          <property name="mapperLocations" value="classpath:com/jm/mapper/*.xml" />
          <!--  mybatis分页插件  -->
          <property name="plugins">
            <array>
              <bean class="com.github.pagehelper.PageInterceptor">
                <property name="properties">
                <!-- 使用下面的方式配置参数，一行配置一个  -->
                <value>
                   offsetAsPageNum=true 
                   rowBoundsWithCount=true 
                   pageSizeZero=true 
                   reasonable=true
                </value>
                </property>
              </bean>
            </array>
         </property>
        </bean>
        <!-- DAO接口所在包名，Spring会自动查找其下的类 ,包下的类需要使用@MapperScan注解,否则容器注入会失败，使用 @MapperScan注解方式表示不用配置文件里面配置路劲了-->
        <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
         <!-- 指定要自动扫描接口的基础包，实现接口 -->
          <property name="basePackage" value="com.jm.dao" />
          <!--指定会话工厂，如果当前上下文中只定义了一个则该属性可省去 -->
          <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
        </bean>
        <!-- (事务管理)transaction manager, use JtaTransactionManager for global tx -->
        <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
          <property name="dataSource" ref="dataSource" />
        </bean>
        <!-- 支持注解驱动的事务管理，指定事务管理器  -->
        <tx:annotation-driven transaction-manager="transactionManager"/>
        
</beans>